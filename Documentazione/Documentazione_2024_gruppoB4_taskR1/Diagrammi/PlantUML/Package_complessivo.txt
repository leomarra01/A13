@startuml
skinparam class {
    BackgroundColor<<Interface>> #LightBlue
    BackgroundColor<<Service>> #LightYellow
    BackgroundColor<<Controller>> #LightGreen
    BackgroundColor<<Model>> #LightGray
    BackgroundColor<<Repository>> #LightGray
}

package T23 #LightBlue {
    package model #LightPink {
        class User {
            - id: Long
            - name: String
            - surname: String
            - email: String
            - password: String
            - isRegisteredWithFacebook: boolean
            - studies: Studies
            - userProfile: UserProfile
            - resetToken: String
        }

        class UserProfile {
            - ID: Integer
            - bio: String
            - profilePicturePath: String
            - followingIds: List<Integer>
            - followerIds: List<Integer>
        }

        class Notification {
            - id: Long
            - titolo: String
            - message: String
            - timestamp: LocalDateTime
            - isRead: Boolean
        }

        class NotificationRepository <<Repository>> {
            - JpaRepository<Notification, Long>
            + List<Notification> findByPlayerID(int playerID)
        }

        class UserProfileRepository <<Repository>> {
            - JpaRepository<UserProfile, Integer>
            + UserProfile findByID(Integer ID)
        }

        class UserRepository <<Repository>> {
            - JpaRepository<User, Integer>
            + User findByEmail(String email)
            + User findByName(String name)
            + User findByID(Integer ID)
            + List<User> findAll()
            + User findByUserProfile(UserProfile userProfile)
        }
    }

    package service #Yellow {
        class UserService <<Service>> {
            - userRepository: UserRepository
            - userProfileRepository: UserProfileRepository
            - notificationRepository: NotificationRepository
        }

        class NotificationService <<Service>> {
            - notificationRepository: NotificationRepository
        }
    }

    package controller #LightGreen {
        class Controller <<Controller>> {
            - userRepository: UserRepository
            - notificationRepository: NotificationRepository
            - userService: UserService
            - notificationService: NotificationService
            }
    }

    controller ..> model
    controller ..> service
    service..> model

    UserRepository -- User
    UserProfileRepository -- UserProfile
    NotificationRepository -- Notification
    
}

package T5 #LightGray {
    package model #LightPink {
        class UserT5 {
            - id: Long
            - name: String
            - surname: String
            - email: String
            - password: String
            - isRegisteredWithFacebook: boolean
            - studies: String
            - userProfile: UserProfile
            - resetToken: String
        }

        class UserProfileT5 {
            - ID: Integer
            - bio: String
            - profilePicturePath: String
            - followingIds: List<Integer>
            - followerIds: List<Integer>
        }

        class NotificationT5 {
            - id: Long
            - titolo: String
            - message: String
            - timestamp: LocalDateTime
            - isRead: Boolean
        }
    }

    package service #Yellow {
        class UserProfileService <<Service>> {
            - serviceManager: ServiceManager
            + getProfileBio(playerID: int): String
            + getAllProfilePictures(): List<String>
            + getProfilePicture(playerID: int): String
            + getProfileID(playerID: int): Integer
            + getFollowingList(playerID: int): List<Integer>
            + getFollowersList(playerID: int): List<Integer>
        }

        class AchievementService <<Service>> {
            - serviceManager: ServiceManager
            + updateProgressByPlayer(playerID: int): List<AchievementProgress>
            + getGames(playerId: int): List<Game>
            + getStatistics(): List<Statistic>
            + setProgress(playerID: int, statisticID: String, progress: float)
            + getProgressesByPlayer(playerID: int): List<AchievementProgress>
            + getStatisticsByPlayer(playerID: int): List<StatisticProgress>
            + updateNotificationsForAchievements(userEmail: String, newAchievements: List<AchievementProgress>)
        }

    }

    package Interfaces #LightBlue {
        interface ServiceInterface <<Interface>> {
            + handleRequest(String, Object...) : Object
        }

        abstract BaseService <<abstract>> implements ServiceInterface {
            + GetAuthenticated(String) : Boolean
            + GetUsers() : List<User>
            + EditProfile(String, String, String) : Boolean
            + GetUserByEmail(String) : User
            + NewNotification(String, String, String) : String
            + getNotifications(String) : List<Notification>
            + updateNotification(String, String) : String
            + deleteNotification(String, String) : String
            + clearNotifications(String) : String
            + followUser(Integer, Integer) : String
            + getFollowers(String) : List<User>
            + getFollowing(String) : List<User>
        }
        
        class ServiceManager <<Service>> {
            - services: Map<String, ServiceInterface>
            - logger: Logger
            + ServiceManager(RestTemplate)
            + handleRequest(String, String, Object...) : Object
            + getServices(String) : ServiceInterface
        }

        class T23Service <<Service>> extends BaseService{
            - restTemplate: RestTemplate
            <<stereotype>> + GetAuthenticated(jwt: String): Boolean
            <<stereotype>> + GetUsers(): List<User>
            <<stereotype>> + EditProfile(userEmail: String, bio: String, imagePath: String): Boolean
            <<stereotype>> + GetUserByEmail(userEmail: String): User
            <<stereotype>> + NewNotification(userEmail: String, title: String, message: String): String
            + getNotifications(userEmail: String): List<Notification>
            + updateNotification(userEmail: String, notificationID: String): String
            + deleteNotification(userEmail: String, notificationID: String): String
            + clearNotifications(userEmail: String): String
            + followUser(targetUserId: Integer, authUserId: Integer): String
            + getFollowers(userId: String): List<User>
            + getFollowing(userId: String): List<User>
        }
    }

    package controller #LightGreen {
        class GuiController <<Controller>> {
            - serviceManager: ServiceManager
            - localeResolver: LocaleResolver
            + @Autowired private: AchievementService achievementService
            + @Autowired private: UserProfileService userProfileService
            + public: GuiController(RestTemplate restTemplate, LocaleResolver localeResolver)
            + @PostMapping("/changeLanguage"): ResponseEntity<Void> changeLanguage(String lang, HttpServletRequest request, HttpServletResponse response)
            + @GetMapping("/profile"): String profilePagePersonal(Model model, @CookieValue(name = "jwt", required = false) String jwt)
            + @GetMapping("/profile/{playerID}"): String profilePage(Model model, @PathVariable(value="playerID") String playerID, @CookieValue(name = "jwt", required = false) String jwt)
            + @GetMapping("/friend/{playerID}"): String friendProfilePage(Model model, @PathVariable(value="playerID") String playerID, @CookieValue(name = "jwt", required = false) String jwt)
            + @PostMapping("/follow/{playerID}"): ResponseEntity<?> toggleFollow(@PathVariable(value="playerID") String playerID, @CookieValue(name = "jwt", required = false) String jwt)
            + @GetMapping("/edit_profile"): String aut_edit_profile(Model model, @CookieValue(name = "jwt", required = false) String jwt)
            + @GetMapping("/edit_profile/{playerID}"): String edit_profile(Model model, @PathVariable(value="playerID") String playerID,@CookieValue(name = "jwt", required = false) String jwt)
            + @GetMapping("/getUserByEMail"): ResponseEntity<User> getUserByEMail(Model model, @RequestParam(value = "email", required = true) String email)
            + @PostMapping("/update-profile"): ResponseEntity<String> updateProfile(String email, String bio, String profilePicturePath)
            + @PostMapping("/read-notification"): ResponseEntity<String> readNotification(String userEmail, String notificationID)
        }
    }

    ServiceManager --> ServiceInterface
    
    UserT5 -->UserProfileT5
    UserProfileT5-->NotificationT5

    controller ..> service
    service -->ServiceManager
    service ..>model
    controller ..> model
    controller ..> Interfaces
}

T23Service-->Controller
@enduml